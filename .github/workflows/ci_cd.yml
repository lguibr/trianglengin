# File: .github/workflows/ci_cd.yml
name: CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ] # Trigger workflow on pushes to tags starting with 'v'
  pull_request:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:

jobs:
  test:
    name: Test (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install CMake (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update && sudo apt-get install -y cmake

    - name: Install CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install cmake # Ensure CMake is available

    # CMake is usually available on Windows runners

    - name: Install Python dependencies (including build tools)
      run: |
        python -m pip install --upgrade pip setuptools wheel pybind11>=2.10 cmake>=3.14

    - name: Install package with dev dependencies (triggers C++ build)
      run: |
        pip install -e .[dev]

    - name: Lint with Ruff
      run: |
        ruff check .

    - name: Check formatting with Ruff
      run: |
        ruff format --check .

    - name: Type check with MyPy
      run: |
        mypy src/trianglengin/ tests/

    - name: Test with Pytest (includes coverage)
      run: |
        pytest --cov=src/trianglengin --cov-report=xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: lguibr/trianglengin
        fail_ci_if_error: true
        flags: trianglengin-${{ matrix.os }}-py${{ matrix.python-version }} # More specific flags

  build_wheels:
    name: Build Wheels (${{ matrix.os }})
    needs: test # Ensure tests pass before building wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Build on all platforms cibuildwheel supports easily
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (for cross-compilation on Linux if needed, e.g., ARM)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all # Or specify like 'arm64'

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v2.20.0 # Use a specific version

      - name: Upload wheels artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl # cibuildwheel outputs wheels to wheelhouse/

  build_sdist:
    name: Build Source Distribution
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Use one consistent version for sdist

      - name: Install build dependencies
        run: python -m pip install --upgrade build

      - name: Build sdist
        run: python -m build --sdist .

      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-sdist
          path: dist/*.tar.gz

  publish:
    name: Publish to PyPI via OIDC
    needs: [build_wheels, build_sdist] # Run only after wheels and sdist are built
    runs-on: ubuntu-latest
    # This condition ensures this job only runs for pushes to tags starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    environment:
      name: pypi
      url: https://pypi.org/p/trianglengin

    permissions:
      id-token: write # Required for trusted publishing

    steps:
    - name: Download all wheels artifacts
      uses: actions/download-artifact@v4
      with:
        # Use a pattern to download all wheel artifacts
        pattern: python-wheels-*
        path: dist/wheels
        merge-multiple: true # Combine artifacts into one directory

    - name: Download sdist artifact
      uses: actions/download-artifact@v4
      with:
        name: python-sdist
        path: dist/sdist

    - name: Combine artifacts
      run: |
        mkdir -p dist/final
        mv dist/wheels/* dist/final/
        mv dist/sdist/* dist/final/
        ls -l dist/final

    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Tell the action to upload files from the combined directory
        packages-dir: dist/final/
        # skip_existing: true # Optional: Prevent errors if version already exists